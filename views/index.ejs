<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="theme-color" content="#062e3f">
    <meta name="Description" content="A dynamic and aesthetic To-Do List WebApp.">

    <!-- Google Font: Quick Sand -->
    <link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@300&display=swap" rel="stylesheet">

    <!-- font awesome (https://fontawesome.com) for basic icons; source: https://cdnjs.com/libraries/font-awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.0-2/css/all.min.css" integrity="sha256-46r060N2LrChLLb5zowXQ72/iKKNiw/lAmygmHExk/o=" crossorigin="anonymous" />

    <link rel="shortcut icon" type="image/png" href="assets/favicon.png"/>
    <link rel="stylesheet" href="CSS/main.css">

    <title>JUST DO IT</title>
<style>
    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    /* #363532, rgb(88, 111, 112) */
    align-items: center;
    display: flex;
    flex-direction: column;
    font-family: 'Work Sans', sans-serif;
    min-height: 100vh;
    padding-top: 3%;
}

/* Body light or darker themes */
.standard {
    background-image: linear-gradient(100deg, #575656, #062e3f);
    color: #ffdfdb;
    transition: 0.3s linear;
    overflow: hidden;
}

.light {
    background-image: linear-gradient(100deg, #d4f1ff, #ffffff);
    color: #1a150e;
    transition: 0.3s linear;
}

.darker {
    background-image: linear-gradient(100deg, #001214, #001f29);
    color: white;
    transition: 0.3s linear;
}

#header, #form, #datetime {
    margin: 0 1rem;
    min-height: 10vh;
    width: 100%;
}

#header {
    align-items: center;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    font-size: 3rem;
    min-height: 25vh;
    width: 100%;
}

/* Theme buttons div */
.flexrow-container {
    align-items: center;
    align-self: flex-end;
    display: flex;
    justify-content: space-around;
    margin-right: 3%;
}

.theme-selector {
    border: 1px solid #d1dae3;
    border-radius: 100%;
    height: 35px;
    margin: 0 8px;
    transition: tranform 150ms ease-in-out, box-shadow 200ms ease-in-out;
    width: 35px;
}

.theme-selector:hover { 
    box-shadow: white 0 0 8px;
    cursor: pointer;
}

.theme-selector:active {
    transform: scale(0.95);
}

.standard-theme {
    background-image: linear-gradient(100deg, #575656, #062e3f);
}

.light-theme {
    background-image: linear-gradient(100deg, #d4f1ff, #ffffff);
}

.darker-theme {
    background-image: linear-gradient(100deg, #001214, #001f29);
}

/* Animation */
#title {
    border-right: solid 3px rgba(0, 0, 0, 0.75);
    white-space: pre;
    overflow: hidden;     
    letter-spacing: 0.20rem;
    margin-top: 50px;
    margin-bottom: 20px;
    max-width: 480px;
  }
  
  /* Animation */
#title {
    animation: animated-text 2s steps(11,end) 0.5s 1 normal both,
        animated-cursor 750ms steps(11,end) infinite;
  }

#title.darker-title {
    animation: animated-text 2s steps(11,end) 0.5s 1 normal both, darker-animated-cursor 750ms steps(11,end) infinite;
}
  
  /* text animation */
  
  @keyframes animated-text{
    from{width: 0%;}
    to{width: 480px;}
  }
  
  /* cursor animations */
  
  @keyframes animated-cursor{
    from{border-right-color: rgba(0, 0, 0, 0.75);}
    to{border-right-color: transparent;}
  }

  @keyframes darker-animated-cursor {
    from{border-right-color: #01394c;}
    to{border-right-color: transparent;}
  }

form {
    display: flex;
    font-size: 1.7rem;
    justify-content: center;
    margin: 15px 0;
    padding: 0.8rem;
    width: 100%;
}

form input {
    padding: 10px;
    font-size: 17px;
    border: none;
    outline: none;
    /* border-radius: 15; */
    border-top-left-radius: 17px;
    border-bottom-left-radius: 17px;
    max-width: 500px;
    transition: background-color 200ms ease-in-out;
    width: 100%;
}

/* Input themes */
form input.standard-input {
    background-color: #181a1a;
    color: rgb(247, 226, 223);
}


form input.light-input {
    background-color: #AEB1B4;
    color: #1a150e;
}

form input.light-input::placeholder {
    color: #1a150e;
    opacity: 0.7;
}

form input.darker-input {
    background-color: #01394c;
    color: white;
}

form input.darker-input::placeholder {
    color: white;
    opacity: 0.7;
}

form input:hover {
    cursor: text;
}

form input.standard-input:hover {
    background-color: rgb(0, 0, 0);
}

form input.light-input:hover {
    background-color: #919699;
}

form input.darker-input:hover {
    background-color: #013141;
}

button {
    border: none;
    outline: none; 
    transition: box-shadow 200ms ease, background-color 200ms ease-in-out;
}

button:hover {
    cursor: pointer;
}

/* Button themes */
button.standard-button {
    background-color: rgb(247, 226, 223);
    color: rgb(0, 0, 0);
}

button.standard-button:hover {
    background-color: white;
    box-shadow: #fff8 0 0 10px;
}

button.light-button {
    background-color: white;
    color: #1a150e;
}

button.light-button:hover {
    background-color: #f0f0f0;
}

button.darker-button {
    background-color: #002837;
    color: white;
}

button.darker-button:hover {
    background-color: #001f29;
}

form button {
    padding: 10px;
    font-size: 17px;
    border-top-right-radius: 15px;
    border-bottom-right-radius: 15px;
    min-width: 100px;
}

#myUnOrdList {
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 1200px;
}

.todo-list {
    min-width: 25%;

    /* To remove the bullets of unordered list */
    list-style: none;
}

.todo {
    margin: 1rem;
    /* background: rgb(247, 226, 223); */
    /* color: black; */
    font-size: 19px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.25em 0.5em;
    border-radius: 30px;
    transition: background-color 200ms ease-in-out;
}

/* Items themes */
.standard-todo {
    background-color: rgb(26, 27, 27);
}

.light-todo {
    background-color:#AEB1B4;
}

.darker-todo {
    background-color: #01394c;
}

.todo li{
    padding: 7px;
    /* word-wrap: break-word; */
    /* flex-wrap: wrap; */
    font-size: 20px;
    flex: 1; /* To push the trash and the check button to the right */
    border-radius: 30px;

    /* wraps the links */
    overflow-wrap: anywhere;
}

.check-btn, .delete-btn {
    font-size: 19px;
    cursor: pointer;
    width: 2em;
    height: 2em;
    border-radius: 80%;
    margin: 0 5px;
}

.todo-item {
    padding: 0rem 0.5rem;
}

.fa-trash, .fa-check { 
    pointer-events: none;
}


.completed {
    transition: 0.2s;
    text-decoration: line-through;
    opacity: 0.5;
}

.fall {
    transition: 0.5s;
    transform: translateY(45rem) rotateZ(45deg);
    opacity: 0;
}

/* Responsive design */
@media only screen and (max-width: 1000px) {
    .flexrow-container {
        align-self: unset;
        margin-right: 0;
    }
}

@media only screen and (max-width: 800px) {
    #header {
        font-size: 2rem;
    }

    #title {
        animation: 
            animated-text 3s steps(16,end) 0.5s 1 normal both,
            animated-cursor 750ms steps(16,end) infinite;
        margin-bottom: 10px;
        margin-top: 30px;
        max-width: 330px;
    }
}

@media only screen and (max-width: 400px) {
    #header {
        font-size: 1.5rem;
    }

    #title {
        animation: 
            animated-text 3.5s steps(16,end) 0.5s 1 normal both,
            animated-cursor 750ms steps(16,end) infinite;
        max-width: 255px;
    }
}

@media only screen and (max-width: 400px) {
    form {
        align-items: center;
        flex-direction: column;
    }

    form input {
        border-radius: 17px;
    }

    form button {
        border-radius: 15px;
        margin-top: 15px;
        width: 50%;
    }
    form > button.light-button {
        box-shadow: 0 0 5px lightgray;
    }
    .todo-list {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        .todo-list th, .todo-list td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        .todo-list th {
            background-color: #f2f2f2;
        }
        .todo-list tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .todo-list tr:hover {
            background-color: #f1f1f1;
        }
        .todo-list button {
            background-color: #ff6347;
            border: none;
            color: white;
            padding: 5px 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px;
        }
        .todo-list button.check-btn {
            background-color: #4CAF50; /* Green */
        }
}
</style>
</head>

<body>
    <div id="header">
        <div class="flexrow-container">
            <div class="standard-theme theme-selector"></div>
            <div class="light-theme theme-selector"></div>
            <div class="darker-theme theme-selector"></div>
        </div>
        <h1 id="title">Just do it.<div id="border"></div></h1>
    </div>

    <div id="form">
        <form action="/api/ToDo/addtask" method="post" id="taskForm" onsubmit="setTimeout(function () { window.location.reload(); }, 10)" >
            <input class="todo-input" name="task" type="text" placeholder="Add a task.">
            <input type="hidden" name="completed" value="false">
            <button class="todo-btn" type="submit">I Got This!</button>
        </form>
    </div>

    <div id="myUnOrdList">
        <table class="todo-list">
            <% task.forEach(t => { %>
                <tr>
                    <td class="todo" id="todo_<%= t._id %>"><%= t.task %></td>
                    <td>
                        <button class="check-btn" onclick="toggleComplete('<%= t._id %>');checkTask('<%= t._id %>')">✔️</button>
                        <button class="delete-btn" onclick="deleteTask('<%= t._id %>');window.location.reload()">❌</button>
                    </td>
                </tr>
            <% }) %>
            </table>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>  
    <script>
        // Selectors
        const toDoInput = document.querySelector('.todo-input');
        const toDoList = document.querySelector('.todo-list');
        const standardTheme = document.querySelector('.standard-theme');
        const lightTheme = document.querySelector('.light-theme');
        const darkerTheme = document.querySelector('.darker-theme');
        const taskForm = document.getElementById('form');

        // Event Listeners for theme selectors
        standardTheme.addEventListener('click', () => changeTheme('standard'));
        lightTheme.addEventListener('click', () => changeTheme('light'));
        darkerTheme.addEventListener('click', () => changeTheme('darker'));

        // Check if theme has been set previously and apply it (or standard theme if not found)
        let savedTheme = localStorage.getItem('savedTheme');
        savedTheme === null ? changeTheme('standard') : changeTheme(savedTheme);

        // Event Listener for form submission
        taskForm.addEventListener('submit', handleFormSubmit);

        // Function to change theme visually
        function changeTheme(color) {
            localStorage.setItem('savedTheme', color);
            savedTheme = localStorage.getItem('savedTheme');

            document.body.className = color;

            // Change blinking cursor for darker theme:
            if (color === 'darker') {
                document.getElementById('title').classList.add('darker-title');
            } else {
                document.getElementById('title').classList.remove('darker-title');
            }

            // Change input color:
            toDoInput.className = `${color}-input`;

            // Update existing tasks with new theme
            document.querySelectorAll('.todo').forEach(todo => {
                todo.classList.remove('standard-todo', 'light-todo', 'darker-todo');
                todo.classList.add(`${color}-todo`);
            });

            // Update button background color:
            document.querySelectorAll('.check-btn, .delete-btn, .todo-btn').forEach(button => {
                button.classList.remove('standard-button', 'light-button', 'darker-button');
                button.classList.add(`${color}-button`);
            });
        }
    function checkTask(taskId){
        console.log("checking task with ID:", taskId);
        axios.put(`/api/ToDo/${taskId}`)
        .then(response => {
            console.log("task deleted:");
        })
        .catch(error => {
            console.error("Error deleting task:", error);
        });
    }
    function deleteTask(taskId) {
    console.log("Deleting task with ID:", taskId);

    axios.delete(`/api/ToDo/delete/${taskId}`)
        .then(response => {
            console.log("task deleted:");
        })
        .catch(error => {
            console.error("Error deleting task:", error);
        });
    }
    function toggleComplete(taskId) {
        const todoElement = document.getElementById(`todo_${taskId}`);
        todoElement.classList.toggle('completed');
    }
  
    
    </script>
</body>
</html>